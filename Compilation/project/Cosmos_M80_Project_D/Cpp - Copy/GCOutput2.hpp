#if !defined _GCOUTPUT2_HPP_
#define _GCOUTPUT2_HPP_
#include "genifa.h"
#include "GWin.h"
#include "GCPanel.hpp"


class GCOutput2 : public GCPanel
{
public:

	//{{CONTROL_ID
	enum {
		GBUTTON00356 = 356,
		GBUTTON00357 = 357,
		GBUTTON00358 = 358,
		GBUTTON00359 = 359,
		GBUTTON00360 = 360,
		GBUTTON00361 = 361,
		GBUTTON00362 = 362,
		GBUTTON00363 = 363,
		GBUTTON00364 = 364,
		GBUTTON00365 = 365,
		GLABEL00003 = 3,
		GLABEL00145 = 145,
		GLABEL00147 = 147,
		GNCPLCBUTTON00260 = 260,
		GNCPLCBUTTON00261 = 261,
		GNCPLCBUTTON00262 = 262,
		GNCPLCBUTTON00263 = 263,
		GNCPLCBUTTON00264 = 264,
		GNCPLCBUTTON00265 = 265,
		GNCPLCBUTTON00266 = 266,
		GNCPLCBUTTON00267 = 267,
		GNCPLCBUTTON00268 = 268,
		GNCPLCBUTTON00269 = 269,
		GNCPLCBUTTON00270 = 270,
		GNCPLCBUTTON00271 = 271,
		GNCPLCBUTTON00272 = 272,
		GNCPLCBUTTON00273 = 273,
		GNCPLCBUTTON00274 = 274,
		GNCPLCBUTTON00275 = 275,
		GNCPLCBUTTON00340 = 340,
		GNCPLCBUTTON00341 = 341,
		GNCPLCBUTTON00342 = 342,
		GNCPLCBUTTON00343 = 343,
		GNCPLCBUTTON00344 = 344,
		GNCPLCBUTTON00345 = 345,
		GNCPLCBUTTON00346 = 346,
		GNCPLCBUTTON00347 = 347,
		GNCPLCBUTTON00348 = 348,
		GNCPLCBUTTON00349 = 349,
		GNCPLCBUTTON00350 = 350,
		GNCPLCBUTTON00351 = 351,
		GNCPLCBUTTON00352 = 352,
		GNCPLCBUTTON00353 = 353,
		GNCPLCBUTTON00354 = 354,
		GNCPLCBUTTON00355 = 355,
		GNXALARMMESSAGE00000 = 0,
		GNXMONITORSTATUS00002 = 2,
		GNXTIME00001 = 1,
		GPICTURE00005 = 5,
		GPICTURE00366 = 366,
		GPICTURE00367 = 367,
		GPICTURE00368 = 368,
		GPICTURE00369 = 369,
		GPICTURE00370 = 370,
		GPICTURE00371 = 371,
		GPICTURE00372 = 372,
		GSRECT00048 = 48,
		GSRECT00050 = 50,
		GSRECT00052 = 52,
		GSRECT00053 = 53,
		GSRECT00054 = 54,
		GSRECT00055 = 55,
		GSRECT00056 = 56,
		GSRECT00057 = 57,
		GSRECT00058 = 58,
		GSRECT00059 = 59,
		GSRECT00060 = 60,
		GSRECT00061 = 61,
		GSRECT00062 = 62,
		GSRECT00063 = 63,
		GSRECT00064 = 64,
		GSRECT00065 = 65,
		GSRECT00144 = 144,
		GSRECT00146 = 146,
		GSRECT00180 = 180,
		GSRECT00181 = 181,
		GSRECT00182 = 182,
		GSRECT00183 = 183,
		GSRECT00184 = 184,
		GSRECT00185 = 185,
		GSRECT00186 = 186,
		GSRECT00187 = 187,
		GSRECT00188 = 188,
		GSRECT00189 = 189,
		GSRECT00190 = 190,
		GSRECT00191 = 191,
		GSRECT00192 = 192,
		GSRECT00193 = 193,
		GSRECT00194 = 194,
		GSRECT00195 = 195,
		GSRECT00308 = 308,
		GSRECT00309 = 309,
		GSRECT00310 = 310,
		GSRECT00311 = 311,
		GSRECT00312 = 312,
		GSRECT00313 = 313,
		GSRECT00314 = 314,
		GSRECT00315 = 315,
		GSRECT00316 = 316,
		GSRECT00317 = 317,
		GSRECT00318 = 318,
		GSRECT00319 = 319,
		GSRECT00320 = 320,
		GSRECT00321 = 321,
		GSRECT00322 = 322,
		GSRECT00323 = 323,
		GSRECT00324 = 324,
		GSRECT00325 = 325,
		GSRECT00326 = 326,
		GSRECT00327 = 327,
		GSRECT00328 = 328,
		GSRECT00329 = 329,
		GSRECT00330 = 330,
		GSRECT00331 = 331,
		GSRECT00332 = 332,
		GSRECT00333 = 333,
		GSRECT00334 = 334,
		GSRECT00335 = 335,
		GSRECT00336 = 336,
		GSRECT00337 = 337,
		GSRECT00338 = 338,
		GSRECT00339 = 339,
		GTEXTBOX00004 = 4,
	};
	//}}CONTROL_ID

	//{{PUBLIC_METHOD
	GCOutput2();
	virtual ~GCOutput2();

	virtual short CreateChildren();
	virtual GPropertyInfo* GetPropertyInfo(const GBaseWindowProperty* pImport, unsigned short* pGPropertyInfoCnt);
	//}}PUBLIC_METHOD
	
	//{{CALLBACK_METHOD
	//}}CALLBACK_METHOD

protected:
	//{{PROTECTED_METHOD
	GCDefCBMP()
	//}}PROTECTED_METHOD
};

extern "C"{
void GCIDeleteGCOutput2( GBaseObject *pObject );
short GCINewGCOutput2( GBaseObject *pObject );
}
#endif /* _GCOUTPUT2_HPP_ */

